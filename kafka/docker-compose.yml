version: '2'
services:

  zookeeper:
    image: confluentinc/cp-zookeeper:4.0.1-1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - /Users/markchristiansen/volumes/zookeeper/data:/var/lib/zookeeper/data
      - /Users/markchristiansen/volumes/zookeeper/logs:/var/lib/zookeeper/log

  broker-1:
    image: confluentinc/cp-kafka:4.0.2-1
    hostname: broker1
    container_name: broker1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker1:19092,KAFKA_EXTERNAL://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:19092,KAFKA_EXTERNAL://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,KAFKA_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: 'true'
      # background thread checks the distribution of partition leaders at regular intervals, configurable by `leader.imbalance.check.interval.seconds`.
      KAFKA_LEADER_IMBALANCE_CHECK_INTERVAL_SECONDS: 30
      # If the leader imbalance exceeds `leader.imbalance.per.broker.percentage`, leader rebalance to the preferred leader for partitions is triggered.
      KAFKA_LEADER_IMBALANCE_PER_BROKER_PERCENTAGE: 10
      # maximum record batch size accepted by the broker
      #KAFKA_MESSAGE_MAX_BYTES: 1000012
      #KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      # quicker failure detection at the cost of more frequent consumer heartbeating, which can overwhelm broker resources
      #KAFKA_GROUP_MIN_SESSION_TIMEOUT_MS: 6000
      # give consumers more time to process messages in between heartbeats at the cost of a longer time to detect failures
      #KAFKA_GROUP_MAX_SESSION_TIMEOUT_MS: 300000
      # default number of log partitions per topic
      #KAFKA_NUM_PARTITIONS: 3
      # when producer sets acks to "all" (or "-1"), specifies the minimum number of replicas that must acknowledge a write for 
      # the write to be considered successful
      KAFKA_MIN_INSYNC_REPLICAS: 2
      # default replication factors for automatically created topics
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      # retain the original compression codec set by the producer
      #KAFKA_COMPRESSION_TYPE: 'producer'
      KAFKA_LOG_DIRS: /logs
      KAFKA_LOG_ROLL_HOURS: 24
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_HOURS: 72
    volumes:
      - /Users/markchristiansen/volumes/broker1/data:/logs

  broker-2:
    image: confluentinc/cp-kafka:4.0.2-1
    hostname: broker2
    container_name: broker2
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker2:19093,KAFKA_EXTERNAL://localhost:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:19093,KAFKA_EXTERNAL://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,KAFKA_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: 'true'
      # background thread checks the distribution of partition leaders at regular intervals, configurable by `leader.imbalance.check.interval.seconds`.
      #KAFKA_LEADER_IMBALANCE_CHECK_INTERVAL_SECONDS: 30
      # If the leader imbalance exceeds `leader.imbalance.per.broker.percentage`, leader rebalance to the preferred leader for partitions is triggered.
      #KAFKA_LEADER_IMBALANCE_PER_BROKER_PERCENTAGE: 10
      # maximum record batch size accepted by the broker
      #KAFKA_MESSAGE_MAX_BYTES: 1000012
      #KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      # quicker failure detection at the cost of more frequent consumer heartbeating, which can overwhelm broker resources
      #KAFKA_GROUP_MIN_SESSION_TIMEOUT_MS: 6000
      # give consumers more time to process messages in between heartbeats at the cost of a longer time to detect failures
      #KAFKA_GROUP_MAX_SESSION_TIMEOUT_MS: 300000
      # default number of log partitions per topic
      #KAFKA_NUM_PARTITIONS: 3
      # when producer sets acks to "all" (or "-1"), specifies the minimum number of replicas that must acknowledge a write for 
      # the write to be considered successful
      KAFKA_MIN_INSYNC_REPLICAS: 2
      # default replication factors for automatically created topics
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      # retain the original compression codec set by the producer
      #KAFKA_COMPRESSION_TYPE: 'producer'
      KAFKA_LOG_DIRS: /logs
      KAFKA_LOG_ROLL_HOURS: 24
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_HOURS: 72
    volumes:
      - /Users/markchristiansen/volumes/broker2/data:/logs

  broker-3:
    image: confluentinc/cp-kafka:4.0.2-1
    hostname: broker3
    container_name: broker3
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker3:19094,KAFKA_EXTERNAL://localhost:9094
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:19094,KAFKA_EXTERNAL://0.0.0.0:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,KAFKA_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: 'true'
      # background thread checks the distribution of partition leaders at regular intervals, configurable by `leader.imbalance.check.interval.seconds`.
      #KAFKA_LEADER_IMBALANCE_CHECK_INTERVAL_SECONDS: 30
      # If the leader imbalance exceeds `leader.imbalance.per.broker.percentage`, leader rebalance to the preferred leader for partitions is triggered.
      #KAFKA_LEADER_IMBALANCE_PER_BROKER_PERCENTAGE: 10
      # maximum record batch size accepted by the broker
      #KAFKA_MESSAGE_MAX_BYTES: 1000012
      #KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      # quicker failure detection at the cost of more frequent consumer heartbeating, which can overwhelm broker resources
      #KAFKA_GROUP_MIN_SESSION_TIMEOUT_MS: 6000
      # give consumers more time to process messages in between heartbeats at the cost of a longer time to detect failures
      #KAFKA_GROUP_MAX_SESSION_TIMEOUT_MS: 300000
      # default number of log partitions per topic
      #KAFKA_NUM_PARTITIONS: 3
      # when producer sets acks to "all" (or "-1"), specifies the minimum number of replicas that must acknowledge a write for 
      # the write to be considered successful
      KAFKA_MIN_INSYNC_REPLICAS: 2
      # default replication factors for automatically created topics
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      # retain the original compression codec set by the producer
      #KAFKA_COMPRESSION_TYPE: 'producer'
      KAFKA_LOG_DIRS: /logs
      KAFKA_LOG_ROLL_HOURS: 24
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_HOURS: 72
    volumes:
      - /Users/markchristiansen/volumes/broker3/data:/logs

  broker-4:
    image: confluentinc/cp-kafka:4.0.2-1
    hostname: broker4
    container_name: broker4
    depends_on:
      - zookeeper
    ports:
      - "9095:9095"
    environment:
      KAFKA_BROKER_ID: 4
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker4:19095,KAFKA_EXTERNAL://localhost:9095
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:19095,KAFKA_EXTERNAL://0.0.0.0:9095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,KAFKA_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: 'true'
      # background thread checks the distribution of partition leaders at regular intervals, configurable by `leader.imbalance.check.interval.seconds`.
      #KAFKA_LEADER_IMBALANCE_CHECK_INTERVAL_SECONDS: 30
      # If the leader imbalance exceeds `leader.imbalance.per.broker.percentage`, leader rebalance to the preferred leader for partitions is triggered.
      #KAFKA_LEADER_IMBALANCE_PER_BROKER_PERCENTAGE: 10
      # maximum record batch size accepted by the broker
      #KAFKA_MESSAGE_MAX_BYTES: 1000012
      #KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      # quicker failure detection at the cost of more frequent consumer heartbeating, which can overwhelm broker resources
      #KAFKA_GROUP_MIN_SESSION_TIMEOUT_MS: 6000
      # give consumers more time to process messages in between heartbeats at the cost of a longer time to detect failures
      #KAFKA_GROUP_MAX_SESSION_TIMEOUT_MS: 300000
      # default number of log partitions per topic
      #KAFKA_NUM_PARTITIONS: 3
      # when producer sets acks to "all" (or "-1"), specifies the minimum number of replicas that must acknowledge a write for 
      # the write to be considered successful
      KAFKA_MIN_INSYNC_REPLICAS: 2
      # default replication factors for automatically created topics
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      # retain the original compression codec set by the producer
      #KAFKA_COMPRESSION_TYPE: 'producer'
      KAFKA_LOG_DIRS: /logs
      KAFKA_LOG_ROLL_HOURS: 24
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_HOURS: 72
    volumes:
      - /Users/markchristiansen/volumes/broker4/data:/logs

  broker-5:
    image: confluentinc/cp-kafka:4.0.2-1
    hostname: broker5
    container_name: broker5
    depends_on:
      - zookeeper
    ports:
      - "9096:9096"
    environment:
      KAFKA_BROKER_ID: 5
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker5:19096,KAFKA_EXTERNAL://localhost:9096
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:19096,KAFKA_EXTERNAL://0.0.0.0:9096
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,KAFKA_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: 'true'
      # background thread checks the distribution of partition leaders at regular intervals, configurable by `leader.imbalance.check.interval.seconds`.
      #KAFKA_LEADER_IMBALANCE_CHECK_INTERVAL_SECONDS: 30
      # If the leader imbalance exceeds `leader.imbalance.per.broker.percentage`, leader rebalance to the preferred leader for partitions is triggered.
      #KAFKA_LEADER_IMBALANCE_PER_BROKER_PERCENTAGE: 10
      # maximum record batch size accepted by the broker
      #KAFKA_MESSAGE_MAX_BYTES: 1000012
      #KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      # quicker failure detection at the cost of more frequent consumer heartbeating, which can overwhelm broker resources
      #KAFKA_GROUP_MIN_SESSION_TIMEOUT_MS: 6000
      # give consumers more time to process messages in between heartbeats at the cost of a longer time to detect failures
      #KAFKA_GROUP_MAX_SESSION_TIMEOUT_MS: 300000
      # default number of log partitions per topic
      #KAFKA_NUM_PARTITIONS: 3
      # when producer sets acks to "all" (or "-1"), specifies the minimum number of replicas that must acknowledge a write for 
      # the write to be considered successful
      KAFKA_MIN_INSYNC_REPLICAS: 2
      # default replication factors for automatically created topics
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      # retain the original compression codec set by the producer
      #KAFKA_COMPRESSION_TYPE: 'producer'
      KAFKA_LOG_DIRS: /logs
      KAFKA_LOG_ROLL_HOURS: 24
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_HOURS: 72
    volumes:
      - /Users/markchristiansen/volumes/broker5/data:/logs

  schema-registry:
    image: confluentinc/cp-schema-registry:4.0.1-1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - broker-1
      - broker-2
      - broker-3
      - broker-4
      - broker-5
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8081'
      #SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://0.0.0.0:19092,PLAINTEXT://0.0.0.0:19093,PLAINTEXT://0.0.0.0:19094,PLAINTEXT://0.0.0.0:19095,PLAINTEXT://0.0.0.0:19096'
